// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MSK.Application.Module.Data;
using System;

namespace MSK.Samples.BiMonetary.Migrator.Migrations.AppDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MSK.Application.Module.Identity.Models.Relationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.ToTable("msk_Relationships");
                });

            modelBuilder.Entity("MSK.Core.Module.Entity.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MSK.Core.Module.Entity.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<Guid?>("RelationshipId");

                    b.Property<Guid?>("RelationshipId1");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("RelationshipId1");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.CryptoCurrency.Models.LinkId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("TickerId");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.ToTable("msk_LinkIds");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.CryptoCurrency.Models.PostId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("TickerId");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.ToTable("msk_PostIds");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.CryptoCurrency.Models.Ticker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AvailableSupply");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("LastSyncWithService");

                    b.Property<double>("MarketCapUsd");

                    b.Property<string>("Name");

                    b.Property<string>("PercentChange1h");

                    b.Property<string>("PercentChange24h");

                    b.Property<string>("PercentChange7d");

                    b.Property<double>("PriceBtc");

                    b.Property<double>("PriceUsd");

                    b.Property<int>("Rank");

                    b.Property<string>("Symbol");

                    b.Property<double>("TotalSupply");

                    b.Property<DateTime>("Updated");

                    b.Property<double>("Volumn24hUsd");

                    b.HasKey("Id");

                    b.ToTable("msk_Tickers");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.AuthorId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("msk_AuthorIds");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("LinkId");

                    b.Property<Guid?>("PostId");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LinkId");

                    b.HasIndex("PostId");

                    b.ToTable("msk_Comments");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.Property<DateTime>("Updated");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.ToTable("msk_Links");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.LinkLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("LinkId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("UserId");

                    b.ToTable("msk_LinkLikes");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("msk_Posts");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.PostLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("PostId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("msk_PostLikes");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.TickerId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("msk_TickerIds");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.TickerLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<Guid?>("TickerId");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TickerId");

                    b.HasIndex("UserId");

                    b.ToTable("msk_TickerLikes");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.UserId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("msk_UserIds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MSK.Core.Module.Entity.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MSK.Core.Module.Entity.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MSK.Core.Module.Entity.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MSK.Core.Module.Entity.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MSK.Core.Module.Entity.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MSK.Core.Module.Entity.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MSK.Core.Module.Entity.Identity.ApplicationUser", b =>
                {
                    b.HasOne("MSK.Application.Module.Identity.Models.Relationship")
                        .WithMany("Followees")
                        .HasForeignKey("RelationshipId");

                    b.HasOne("MSK.Application.Module.Identity.Models.Relationship")
                        .WithMany("Followers")
                        .HasForeignKey("RelationshipId1");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.CryptoCurrency.Models.LinkId", b =>
                {
                    b.HasOne("MSK.Samples.BiMonetary.Module.CryptoCurrency.Models.Ticker")
                        .WithMany("Links")
                        .HasForeignKey("TickerId");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.CryptoCurrency.Models.PostId", b =>
                {
                    b.HasOne("MSK.Samples.BiMonetary.Module.CryptoCurrency.Models.Ticker")
                        .WithMany("Posts")
                        .HasForeignKey("TickerId");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.Comment", b =>
                {
                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.AuthorId", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.Link")
                        .WithMany("Comments")
                        .HasForeignKey("LinkId");

                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.LinkLike", b =>
                {
                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId");

                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.UserId", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.Post", b =>
                {
                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.AuthorId", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.PostLike", b =>
                {
                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.UserId", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MSK.Samples.BiMonetary.Module.Social.Models.TickerLike", b =>
                {
                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.TickerId", "Ticker")
                        .WithMany()
                        .HasForeignKey("TickerId");

                    b.HasOne("MSK.Samples.BiMonetary.Module.Social.Models.UserId", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
